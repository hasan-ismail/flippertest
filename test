#include <furi.h>
#include <furi_hal.h>
#include <gui/gui.h>
#include <input/input.h>
#include <notification/notification_messages.h>

// Define constants for the days of the week
#define MONDAY 1
#define TUESDAY 2
#define WEDNESDAY 3
#define THURSDAY 4
#define FRIDAY 5
#define SATURDAY 6
#define SUNDAY 7

// Structure to hold multiple time slots per day
typedef struct {
    uint8_t hour;
    uint8_t minute;
} ScheduledTime;

// Define the schedule for each day of the week (at least 10 per day)
#define MAX_SCHEDULES_PER_DAY 10

// Schedule structure for each day
typedef struct {
    ScheduledTime times[MAX_SCHEDULES_PER_DAY];
    uint8_t count;  // Number of valid time slots for the day
} DailySchedule;

// Define a schedule for each day of the week
DailySchedule week_schedule[7] = {
    {{ {10, 30}, {12, 15}, {14, 45} }, 3},  // Monday
    {{ {9, 00}, {11, 30}, {16, 00} }, 3},   // Tuesday
    {{ {8, 15}, {13, 00}, {18, 45} }, 3},   // Wednesday
    {{ {10, 00}, {12, 30}, {15, 15} }, 3},  // Thursday
    {{ {7, 45}, {13, 45}, {19, 30} }, 3},   // Friday
    {{ {9, 30}, {14, 30}, {20, 00} }, 3},   // Saturday
    {{ {11, 00}, {16, 30}, {21, 15} }, 3},  // Sunday
};

// Function to send the RF signal
void send_rf_signal() {
    // Log the action
    FURI_LOG_I("RF Scheduler", "Sending RF signal...");

    // Sending the stored RF signal (make sure your .sub file is in this path)
    furi_hal_subghz_send_signal("/ext/subghz/my_signal.sub");

    // Notify the user with feedback
    NotificationApp* notification = furi_record_open("notification");
    notification_message(notification, &sequence_blink_green);
    furi_record_close("notification");
}

// Function to get the current day of the week (1 = Monday, 7 = Sunday)
uint8_t get_current_day_of_week() {
    FuriDateTime current_time;
    furi_hal_rtc_get_datetime(&current_time);
    return current_time.weekday;  // Return day as an integer (Monday = 1, Sunday = 7)
}

// Function to check the current time and day, and send the RF signal if a match is found
void check_and_send_signal() {
    // Get current time and day of the week
    FuriTime current_time;
    furi_hal_rtc_get_time(&current_time);
    uint8_t current_day = get_current_day_of_week();

    // Log current time and day
    FURI_LOG_I("RF Scheduler", "Current time: %02d:%02d, Day: %d", current_time.hour, current_time.minute, current_day);

    // Get the schedule for the current day
    DailySchedule* schedule = &week_schedule[current_day - 1];

    // Check each time slot for the current day
    for(uint8_t i = 0; i < schedule->count; i++) {
        if(schedule->times[i].hour == current_time.hour && schedule->times[i].minute == current_time.minute) {
            send_rf_signal();
            break;  // Exit after sending the signal once
        }
    }
}

// Main event loop of the app
int32_t rf_signal_scheduler_app(void* p) {
    UNUSED(p);

    // Initialize GUI
    Gui* gui = furi_record_open("gui");
    ViewPort* view_port = view_port_alloc();

    // Set the draw callback for displaying messages on the screen
    view_port_draw_callback_set(view_port, [](Canvas* canvas, void* context) {
        canvas_clear(canvas);
        canvas_set_font(canvas, FontPrimary);
        canvas_draw_str(canvas, 10, 20, "RF Signal Scheduler");
        canvas_draw_str(canvas, 10, 40, "Monitoring the schedule...");
    }, NULL);

    // Attach the viewport to the GUI
    gui_add_view_port(gui, view_port, GuiLayerFullscreen);

    // Run the loop to check time every minute
    while(1) {
        check_and_send_signal();
        furi_delay_ms(60000); // Check every minute
    }

    // Clean up
    gui_remove_view_port(gui, view_port);
    view_port_free(view_port);
    furi_record_close("gui");

    return 0;
}

// Input event handler (optional, for handling button presses)
static void input_event_handler(InputEvent* input_event, void* context) {
    if(input_event->type == InputTypePress) {
        // Handle button presses here if needed
    }
}

// Application entry point
int32_t main() {
    furi_hal_rtc_init();  // Initialize the real-time clock
    rf_signal_scheduler_app(NULL);  // Start the RF scheduler app
    return 0;
}
